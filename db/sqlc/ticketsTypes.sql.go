// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: ticketsTypes.sql

package db

import (
	"context"
	"database/sql"
)

const createEventTicketType = `-- name: CreateEventTicketType :one
INSERT INTO tickets_types (
        events_id,
        name,
        start_validity_date,
        end_validity_date,
        usage_limitation,
        usage_unlimited
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, events_id, name, start_validity_date, end_validity_date, usage_limitation, usage_unlimited
`

type CreateEventTicketTypeParams struct {
	EventsID          int32        `json:"events_id"`
	Name              string       `json:"name"`
	StartValidityDate sql.NullTime `json:"start_validity_date"`
	EndValidityDate   sql.NullTime `json:"end_validity_date"`
	UsageLimitation   int32        `json:"usage_limitation"`
	UsageUnlimited    bool         `json:"usage_unlimited"`
}

func (q *Queries) CreateEventTicketType(ctx context.Context, arg CreateEventTicketTypeParams) (TicketsType, error) {
	row := q.db.QueryRow(ctx, createEventTicketType,
		arg.EventsID,
		arg.Name,
		arg.StartValidityDate,
		arg.EndValidityDate,
		arg.UsageLimitation,
		arg.UsageUnlimited,
	)
	var i TicketsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventsID,
		&i.Name,
		&i.StartValidityDate,
		&i.EndValidityDate,
		&i.UsageLimitation,
		&i.UsageUnlimited,
	)
	return i, err
}

const deleteEventTicketsType = `-- name: DeleteEventTicketsType :exec
DELETE FROM tickets_types
WHERE tickets_types.id = $1
    AND tickets_types.events_id IN (
        SELECT events_administrators.events_id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteEventTicketsTypeParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteEventTicketsType(ctx context.Context, arg DeleteEventTicketsTypeParams) error {
	_, err := q.db.Exec(ctx, deleteEventTicketsType, arg.ID, arg.UsersID)
	return err
}

const getEventTicketsType = `-- name: GetEventTicketsType :one
SELECT id, created_at, updated_at, events_id, name, start_validity_date, end_validity_date, usage_limitation, usage_unlimited
FROM tickets_types
WHERE tickets_types.id = $1
    AND tickets_types.events_id IN (
        SELECT events_administrators.events_id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type GetEventTicketsTypeParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) GetEventTicketsType(ctx context.Context, arg GetEventTicketsTypeParams) (TicketsType, error) {
	row := q.db.QueryRow(ctx, getEventTicketsType, arg.ID, arg.UsersID)
	var i TicketsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventsID,
		&i.Name,
		&i.StartValidityDate,
		&i.EndValidityDate,
		&i.UsageLimitation,
		&i.UsageUnlimited,
	)
	return i, err
}

const getEventTicketsTypes = `-- name: GetEventTicketsTypes :many
SELECT id, created_at, updated_at, events_id, name, start_validity_date, end_validity_date, usage_limitation, usage_unlimited
FROM tickets_types
WHERE tickets_types.events_id IN (
        SELECT events_administrators.events_id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetEventTicketsTypesParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetEventTicketsTypes(ctx context.Context, arg GetEventTicketsTypesParams) ([]TicketsType, error) {
	rows, err := q.db.Query(ctx, getEventTicketsTypes, arg.EventsID, arg.UsersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketsType
	for rows.Next() {
		var i TicketsType
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EventsID,
			&i.Name,
			&i.StartValidityDate,
			&i.EndValidityDate,
			&i.UsageLimitation,
			&i.UsageUnlimited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
