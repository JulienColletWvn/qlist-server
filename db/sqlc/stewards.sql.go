// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: stewards.sql

package db

import (
	"context"
)

const createUserEventSteward = `-- name: CreateUserEventSteward :one
INSERT INTO stewards (events_id, contacts_id)
VALUES ($1, $2)
RETURNING id, created_at, contacts_id, events_id
`

type CreateUserEventStewardParams struct {
	EventsID   int32 `json:"events_id"`
	ContactsID int32 `json:"contacts_id"`
}

func (q *Queries) CreateUserEventSteward(ctx context.Context, arg CreateUserEventStewardParams) (Steward, error) {
	row := q.db.QueryRow(ctx, createUserEventSteward, arg.EventsID, arg.ContactsID)
	var i Steward
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const deleteUserEventSteward = `-- name: DeleteUserEventSteward :exec
DELETE FROM stewards
WHERE stewards.id = $1
    AND stewards.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteUserEventStewardParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteUserEventSteward(ctx context.Context, arg DeleteUserEventStewardParams) error {
	_, err := q.db.Exec(ctx, deleteUserEventSteward, arg.ID, arg.UsersID)
	return err
}

const getUserEventSteward = `-- name: GetUserEventSteward :one
SELECT id, created_at, contacts_id, events_id
FROM stewards
WHERE stewards.id = $1
    AND stewards.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetUserEventStewardParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetUserEventSteward(ctx context.Context, arg GetUserEventStewardParams) (Steward, error) {
	row := q.db.QueryRow(ctx, getUserEventSteward, arg.ID, arg.EventsID, arg.UsersID)
	var i Steward
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const getUserEventStewards = `-- name: GetUserEventStewards :one
SELECT id, created_at, contacts_id, events_id
FROM stewards
WHERE stewards.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetUserEventStewardsParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetUserEventStewards(ctx context.Context, arg GetUserEventStewardsParams) (Steward, error) {
	row := q.db.QueryRow(ctx, getUserEventStewards, arg.EventsID, arg.UsersID)
	var i Steward
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}
