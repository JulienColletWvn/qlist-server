// Code generated by sqlc. DO NOT EDIT.
// source: cashiers.sql

package db

import (
	"context"
)

const createCashier = `-- name: CreateCashier :one
INSERT INTO cashiers (events_id, contacts_id)
VALUES ($1, $2)
RETURNING id, created_at, contacts_id, events_id
`

type CreateCashierParams struct {
	EventsID   int32 `json:"events_id"`
	ContactsID int32 `json:"contacts_id"`
}

func (q *Queries) CreateCashier(ctx context.Context, arg CreateCashierParams) (Cashier, error) {
	row := q.db.QueryRowContext(ctx, createCashier, arg.EventsID, arg.ContactsID)
	var i Cashier
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const deleteCashier = `-- name: DeleteCashier :exec
DELETE FROM cashiers
WHERE cashiers.id = $1
    AND cashiers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteCashierParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteCashier(ctx context.Context, arg DeleteCashierParams) error {
	_, err := q.db.ExecContext(ctx, deleteCashier, arg.ID, arg.UsersID)
	return err
}

const getCashier = `-- name: GetCashier :one
SELECT id, created_at, contacts_id, events_id
FROM cashiers
WHERE cashiers.id = $1
    AND cashiers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetCashierParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetCashier(ctx context.Context, arg GetCashierParams) (Cashier, error) {
	row := q.db.QueryRowContext(ctx, getCashier, arg.ID, arg.EventsID, arg.UsersID)
	var i Cashier
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const getCashiers = `-- name: GetCashiers :one
SELECT id, created_at, contacts_id, events_id
FROM cashiers
WHERE cashiers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetCashiersParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetCashiers(ctx context.Context, arg GetCashiersParams) (Cashier, error) {
	row := q.db.QueryRowContext(ctx, getCashiers, arg.EventsID, arg.UsersID)
	var i Cashier
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}
