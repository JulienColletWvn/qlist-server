// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tickets.sql

package db

import (
	"context"
)

const createGuestTicket = `-- name: CreateGuestTicket :one
INSERT INTO tickets (tickets_type_id, guests_id)
VALUES ($1, $2)
RETURNING id, created_at, tickets_type_id, guests_id
`

type CreateGuestTicketParams struct {
	TicketsTypeID int32 `json:"tickets_type_id"`
	GuestsID      int32 `json:"guests_id"`
}

func (q *Queries) CreateGuestTicket(ctx context.Context, arg CreateGuestTicketParams) (Ticket, error) {
	row := q.db.QueryRow(ctx, createGuestTicket, arg.TicketsTypeID, arg.GuestsID)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TicketsTypeID,
		&i.GuestsID,
	)
	return i, err
}

const deleteGuestTicket = `-- name: DeleteGuestTicket :exec
DELETE FROM tickets
WHERE tickets.id = $1
`

func (q *Queries) DeleteGuestTicket(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGuestTicket, id)
	return err
}

const getGuestTicket = `-- name: GetGuestTicket :one
SELECT id, created_at, tickets_type_id, guests_id
FROM tickets
WHERE tickets.guests_id = $1
    AND tickets.id = $2
`

type GetGuestTicketParams struct {
	GuestsID int32 `json:"guests_id"`
	ID       int32 `json:"id"`
}

func (q *Queries) GetGuestTicket(ctx context.Context, arg GetGuestTicketParams) (Ticket, error) {
	row := q.db.QueryRow(ctx, getGuestTicket, arg.GuestsID, arg.ID)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TicketsTypeID,
		&i.GuestsID,
	)
	return i, err
}

const getGuestTickets = `-- name: GetGuestTickets :many
SELECT id, created_at, tickets_type_id, guests_id
FROM tickets
WHERE tickets.guests_id = $1
`

func (q *Queries) GetGuestTickets(ctx context.Context, guestsID int32) ([]Ticket, error) {
	rows, err := q.db.Query(ctx, getGuestTickets, guestsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TicketsTypeID,
			&i.GuestsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
