// Code generated by sqlc. DO NOT EDIT.
// source: tickets.sql

package db

import (
	"context"
	"database/sql"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO tickets (
  tickets_type_id, sellers_id, guests_id
) VALUES (
  $1, $2, $3
)
RETURNING id, created_at, tickets_type_id, sellers_id, guests_id
`

type CreateTicketParams struct {
	TicketsTypeID int32 `json:"tickets_type_id"`
	SellersID     int32 `json:"sellers_id"`
	GuestsID      int32 `json:"guests_id"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket, arg.TicketsTypeID, arg.SellersID, arg.GuestsID)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TicketsTypeID,
		&i.SellersID,
		&i.GuestsID,
	)
	return i, err
}

const createTicketTransaction = `-- name: CreateTicketTransaction :one
INSERT INTO tickets_transactions (
  tickets_id, amount, status
) VALUES (
  $1, $2, $3
)
RETURNING id, created_at, tickets_id, amount, status
`

type CreateTicketTransactionParams struct {
	TicketsID int32             `json:"tickets_id"`
	Amount    int32             `json:"amount"`
	Status    TransactionStatus `json:"status"`
}

func (q *Queries) CreateTicketTransaction(ctx context.Context, arg CreateTicketTransactionParams) (TicketsTransaction, error) {
	row := q.db.QueryRowContext(ctx, createTicketTransaction, arg.TicketsID, arg.Amount, arg.Status)
	var i TicketsTransaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TicketsID,
		&i.Amount,
		&i.Status,
	)
	return i, err
}

const createTicketType = `-- name: CreateTicketType :one
INSERT INTO tickets_type (
  events_id, name, start_validity_date, end_validity_date, usage_limitation, usage_unlimited
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, created_at, updated_at, events_id, name, start_validity_date, end_validity_date, usage_limitation, usage_unlimited
`

type CreateTicketTypeParams struct {
	EventsID          int32        `json:"events_id"`
	Name              string       `json:"name"`
	StartValidityDate sql.NullTime `json:"start_validity_date"`
	EndValidityDate   sql.NullTime `json:"end_validity_date"`
	UsageLimitation   int32        `json:"usage_limitation"`
	UsageUnlimited    bool         `json:"usage_unlimited"`
}

func (q *Queries) CreateTicketType(ctx context.Context, arg CreateTicketTypeParams) (TicketsType, error) {
	row := q.db.QueryRowContext(ctx, createTicketType,
		arg.EventsID,
		arg.Name,
		arg.StartValidityDate,
		arg.EndValidityDate,
		arg.UsageLimitation,
		arg.UsageUnlimited,
	)
	var i TicketsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventsID,
		&i.Name,
		&i.StartValidityDate,
		&i.EndValidityDate,
		&i.UsageLimitation,
		&i.UsageUnlimited,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM tickets
WHERE id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, id)
	return err
}

const deleteTicketTransaction = `-- name: DeleteTicketTransaction :exec
DELETE FROM tickets_transactions
WHERE id = $1
`

func (q *Queries) DeleteTicketTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTicketTransaction, id)
	return err
}

const deleteTicketType = `-- name: DeleteTicketType :exec
DELETE FROM tickets_type
WHERE id = $1
`

func (q *Queries) DeleteTicketType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTicketType, id)
	return err
}
