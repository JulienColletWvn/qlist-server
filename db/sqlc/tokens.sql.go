// Code generated by sqlc. DO NOT EDIT.
// source: tokens.sql

package db

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  uuid, wallets_id
) VALUES (
  $1, $2
)
RETURNING id, uuid, wallets_id
`

type CreateTokenParams struct {
	Uuid      string `json:"uuid"`
	WalletsID int32  `json:"wallets_id"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.Uuid, arg.WalletsID)
	var i Token
	err := row.Scan(&i.ID, &i.Uuid, &i.WalletsID)
	return i, err
}

const createTokenTransaction = `-- name: CreateTokenTransaction :one
INSERT INTO tokens_transactions (
  transaction_date, amount, online_sell, cashiers_id, sellers_id, tokens_id, events_products_id, status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at, updated_at, transaction_date, amount, online_sell, cashiers_id, sellers_id, tokens_id, events_products_id, status
`

type CreateTokenTransactionParams struct {
	TransactionDate  time.Time         `json:"transaction_date"`
	Amount           int32             `json:"amount"`
	OnlineSell       bool              `json:"online_sell"`
	CashiersID       int32             `json:"cashiers_id"`
	SellersID        int32             `json:"sellers_id"`
	TokensID         int32             `json:"tokens_id"`
	EventsProductsID int32             `json:"events_products_id"`
	Status           TransactionStatus `json:"status"`
}

func (q *Queries) CreateTokenTransaction(ctx context.Context, arg CreateTokenTransactionParams) (TokensTransaction, error) {
	row := q.db.QueryRowContext(ctx, createTokenTransaction,
		arg.TransactionDate,
		arg.Amount,
		arg.OnlineSell,
		arg.CashiersID,
		arg.SellersID,
		arg.TokensID,
		arg.EventsProductsID,
		arg.Status,
	)
	var i TokensTransaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TransactionDate,
		&i.Amount,
		&i.OnlineSell,
		&i.CashiersID,
		&i.SellersID,
		&i.TokensID,
		&i.EventsProductsID,
		&i.Status,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const deleteTokenTransaction = `-- name: DeleteTokenTransaction :exec
DELETE FROM tokens_transactions
WHERE id = $1
`

func (q *Queries) DeleteTokenTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTokenTransaction, id)
	return err
}
