// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateEventGuests implements pgx.CopyFromSource.
type iteratorForCreateEventGuests struct {
	rows                 []CreateEventGuestsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateEventGuests) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateEventGuests) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Note,
		r.rows[0].EventsID,
		r.rows[0].ContactsID,
	}, nil
}

func (r iteratorForCreateEventGuests) Err() error {
	return nil
}

func (q *Queries) CreateEventGuests(ctx context.Context, arg []CreateEventGuestsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"guests"}, []string{"note", "events_id", "contacts_id"}, &iteratorForCreateEventGuests{rows: arg})
}

// iteratorForCreateUserContacts implements pgx.CopyFromSource.
type iteratorForCreateUserContacts struct {
	rows                 []CreateUserContactsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateUserContacts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateUserContacts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Email,
		r.rows[0].Firstname,
		r.rows[0].Lastname,
		r.rows[0].Phone,
		r.rows[0].Lang,
		r.rows[0].CreatorID,
	}, nil
}

func (r iteratorForCreateUserContacts) Err() error {
	return nil
}

func (q *Queries) CreateUserContacts(ctx context.Context, arg []CreateUserContactsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"contacts"}, []string{"email", "firstname", "lastname", "phone", "lang", "creator_id"}, &iteratorForCreateUserContacts{rows: arg})
}
