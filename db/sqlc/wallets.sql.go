// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: wallets.sql

package db

import (
	"context"
	"database/sql"
)

const createGuestWallet = `-- name: CreateGuestWallet :one
INSERT INTO wallets (
        guests_id,
        wallets_type_id,
        token,
        balance
    )
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, guests_id, wallets_type_id, token, balance
`

type CreateGuestWalletParams struct {
	GuestsID      int32         `json:"guests_id"`
	WalletsTypeID int32         `json:"wallets_type_id"`
	Token         string        `json:"token"`
	Balance       sql.NullInt32 `json:"balance"`
}

func (q *Queries) CreateGuestWallet(ctx context.Context, arg CreateGuestWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createGuestWallet,
		arg.GuestsID,
		arg.WalletsTypeID,
		arg.Token,
		arg.Balance,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.GuestsID,
		&i.WalletsTypeID,
		&i.Token,
		&i.Balance,
	)
	return i, err
}

const deleteGuestWallet = `-- name: DeleteGuestWallet :exec
DELETE FROM wallets
WHERE id = $1
`

func (q *Queries) DeleteGuestWallet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGuestWallet, id)
	return err
}

const getGuestWallet = `-- name: GetGuestWallet :one
SELECT id, created_at, guests_id, wallets_type_id, token, balance
FROM wallets
WHERE wallets.guests_id = $1
    AND wallets.id = $2
`

type GetGuestWalletParams struct {
	GuestsID int32 `json:"guests_id"`
	ID       int32 `json:"id"`
}

func (q *Queries) GetGuestWallet(ctx context.Context, arg GetGuestWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, getGuestWallet, arg.GuestsID, arg.ID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.GuestsID,
		&i.WalletsTypeID,
		&i.Token,
		&i.Balance,
	)
	return i, err
}

const getGuestWallets = `-- name: GetGuestWallets :many
SELECT id, created_at, guests_id, wallets_type_id, token, balance
FROM wallets
WHERE wallets.guests_id = $1
`

func (q *Queries) GetGuestWallets(ctx context.Context, guestsID int32) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getGuestWallets, guestsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.GuestsID,
			&i.WalletsTypeID,
			&i.Token,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGuestWalletBalance = `-- name: UpdateGuestWalletBalance :one
UPDATE wallets
SET balance = $1
WHERE id = $2
RETURNING id, created_at, guests_id, wallets_type_id, token, balance
`

type UpdateGuestWalletBalanceParams struct {
	Balance sql.NullInt32 `json:"balance"`
	ID      int32         `json:"id"`
}

func (q *Queries) UpdateGuestWalletBalance(ctx context.Context, arg UpdateGuestWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateGuestWalletBalance, arg.Balance, arg.ID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.GuestsID,
		&i.WalletsTypeID,
		&i.Token,
		&i.Balance,
	)
	return i, err
}

const updateGuestWalletToken = `-- name: UpdateGuestWalletToken :one
UPDATE wallets
SET token = $1
WHERE id = $2
RETURNING id, created_at, guests_id, wallets_type_id, token, balance
`

type UpdateGuestWalletTokenParams struct {
	Token string `json:"token"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateGuestWalletToken(ctx context.Context, arg UpdateGuestWalletTokenParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateGuestWalletToken, arg.Token, arg.ID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.GuestsID,
		&i.WalletsTypeID,
		&i.Token,
		&i.Balance,
	)
	return i, err
}
