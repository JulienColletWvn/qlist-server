// Code generated by sqlc. DO NOT EDIT.
// source: wallets.sql

package db

import (
	"context"
	"time"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
  guests_id, wallets_type_id
) VALUES (
  $1, $2
)
RETURNING id, created_at, guests_id, wallets_type_id
`

type CreateWalletParams struct {
	GuestsID      int32 `json:"guests_id"`
	WalletsTypeID int32 `json:"wallets_type_id"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet, arg.GuestsID, arg.WalletsTypeID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.GuestsID,
		&i.WalletsTypeID,
	)
	return i, err
}

const createWalletPricing = `-- name: CreateWalletPricing :one
INSERT INTO wallets_pricing (
  quantity, unit_price, wallets_type_id
) VALUES (
  $1, $2, $3
)
RETURNING id, type, quantity, unit_price, wallets_type_id
`

type CreateWalletPricingParams struct {
	Quantity      int32 `json:"quantity"`
	UnitPrice     int32 `json:"unit_price"`
	WalletsTypeID int32 `json:"wallets_type_id"`
}

func (q *Queries) CreateWalletPricing(ctx context.Context, arg CreateWalletPricingParams) (WalletsPricing, error) {
	row := q.db.QueryRowContext(ctx, createWalletPricing, arg.Quantity, arg.UnitPrice, arg.WalletsTypeID)
	var i WalletsPricing
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Quantity,
		&i.UnitPrice,
		&i.WalletsTypeID,
	)
	return i, err
}

const createWalletTransaction = `-- name: CreateWalletTransaction :one
INSERT INTO wallets_transactions (
  cashiers_id, wallets_id, wallets_pricing_id, units_sold, status
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, created_at, cashiers_id, wallets_id, wallets_pricing_id, units_sold, status
`

type CreateWalletTransactionParams struct {
	CashiersID       int32             `json:"cashiers_id"`
	WalletsID        int32             `json:"wallets_id"`
	WalletsPricingID int32             `json:"wallets_pricing_id"`
	UnitsSold        int32             `json:"units_sold"`
	Status           TransactionStatus `json:"status"`
}

func (q *Queries) CreateWalletTransaction(ctx context.Context, arg CreateWalletTransactionParams) (WalletsTransaction, error) {
	row := q.db.QueryRowContext(ctx, createWalletTransaction,
		arg.CashiersID,
		arg.WalletsID,
		arg.WalletsPricingID,
		arg.UnitsSold,
		arg.Status,
	)
	var i WalletsTransaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.CashiersID,
		&i.WalletsID,
		&i.WalletsPricingID,
		&i.UnitsSold,
		&i.Status,
	)
	return i, err
}

const createWalletType = `-- name: CreateWalletType :one
INSERT INTO wallets_type (
  events_id, name, start_validity_date, end_validity_date, max_amount, online_reload
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, created_at, updated_at, events_id, name, start_validity_date, end_validity_date, max_amount, online_reload
`

type CreateWalletTypeParams struct {
	EventsID          int32     `json:"events_id"`
	Name              string    `json:"name"`
	StartValidityDate time.Time `json:"start_validity_date"`
	EndValidityDate   time.Time `json:"end_validity_date"`
	MaxAmount         int32     `json:"max_amount"`
	OnlineReload      bool      `json:"online_reload"`
}

func (q *Queries) CreateWalletType(ctx context.Context, arg CreateWalletTypeParams) (WalletsType, error) {
	row := q.db.QueryRowContext(ctx, createWalletType,
		arg.EventsID,
		arg.Name,
		arg.StartValidityDate,
		arg.EndValidityDate,
		arg.MaxAmount,
		arg.OnlineReload,
	)
	var i WalletsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventsID,
		&i.Name,
		&i.StartValidityDate,
		&i.EndValidityDate,
		&i.MaxAmount,
		&i.OnlineReload,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWallet, id)
	return err
}

const deleteWalletPricing = `-- name: DeleteWalletPricing :exec
DELETE FROM wallets_pricing
WHERE id = $1
`

func (q *Queries) DeleteWalletPricing(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWalletPricing, id)
	return err
}

const deleteWalletTransaction = `-- name: DeleteWalletTransaction :exec
DELETE FROM wallets_transactions
WHERE id = $1
`

func (q *Queries) DeleteWalletTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWalletTransaction, id)
	return err
}

const deleteWalletType = `-- name: DeleteWalletType :exec
DELETE FROM wallets_type
WHERE id = $1
`

func (q *Queries) DeleteWalletType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWalletType, id)
	return err
}
