// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: sellers.sql

package db

import (
	"context"
)

const createUserEventSeller = `-- name: CreateUserEventSeller :one
INSERT INTO sellers (events_id, contacts_id)
VALUES ($1, $2)
RETURNING id, created_at, contacts_id, events_id
`

type CreateUserEventSellerParams struct {
	EventsID   int32 `json:"events_id"`
	ContactsID int32 `json:"contacts_id"`
}

func (q *Queries) CreateUserEventSeller(ctx context.Context, arg CreateUserEventSellerParams) (Seller, error) {
	row := q.db.QueryRow(ctx, createUserEventSeller, arg.EventsID, arg.ContactsID)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const deleteUserEventSeller = `-- name: DeleteUserEventSeller :exec
DELETE FROM sellers
WHERE sellers.id = $1
    AND sellers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteUserEventSellerParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteUserEventSeller(ctx context.Context, arg DeleteUserEventSellerParams) error {
	_, err := q.db.Exec(ctx, deleteUserEventSeller, arg.ID, arg.UsersID)
	return err
}

const getUserEventSeller = `-- name: GetUserEventSeller :one
SELECT id, created_at, contacts_id, events_id
FROM sellers
WHERE sellers.id = $1
    AND sellers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetUserEventSellerParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetUserEventSeller(ctx context.Context, arg GetUserEventSellerParams) (Seller, error) {
	row := q.db.QueryRow(ctx, getUserEventSeller, arg.ID, arg.EventsID, arg.UsersID)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const getUserEventSellers = `-- name: GetUserEventSellers :one
SELECT id, created_at, contacts_id, events_id
FROM sellers
WHERE sellers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetUserEventSellersParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetUserEventSellers(ctx context.Context, arg GetUserEventSellersParams) (Seller, error) {
	row := q.db.QueryRow(ctx, getUserEventSellers, arg.EventsID, arg.UsersID)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}
