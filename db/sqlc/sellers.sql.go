// Code generated by sqlc. DO NOT EDIT.
// source: sellers.sql

package db

import (
	"context"
)

const createSeller = `-- name: CreateSeller :one
INSERT INTO sellers (events_id, contacts_id)
VALUES ($1, $2)
RETURNING id, created_at, contacts_id, events_id
`

type CreateSellerParams struct {
	EventsID   int32 `json:"events_id"`
	ContactsID int32 `json:"contacts_id"`
}

func (q *Queries) CreateSeller(ctx context.Context, arg CreateSellerParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, createSeller, arg.EventsID, arg.ContactsID)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const deleteSeller = `-- name: DeleteSeller :exec
DELETE FROM sellers
WHERE sellers.id = $1
    AND sellers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteSellerParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteSeller(ctx context.Context, arg DeleteSellerParams) error {
	_, err := q.db.ExecContext(ctx, deleteSeller, arg.ID, arg.UsersID)
	return err
}

const getSeller = `-- name: GetSeller :one
SELECT id, created_at, contacts_id, events_id
FROM sellers
WHERE sellers.id = $1
    AND sellers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetSellerParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetSeller(ctx context.Context, arg GetSellerParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, getSeller, arg.ID, arg.EventsID, arg.UsersID)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}

const getSellers = `-- name: GetSellers :one
SELECT id, created_at, contacts_id, events_id
FROM sellers
WHERE sellers.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetSellersParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetSellers(ctx context.Context, arg GetSellersParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, getSellers, arg.EventsID, arg.UsersID)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContactsID,
		&i.EventsID,
	)
	return i, err
}
