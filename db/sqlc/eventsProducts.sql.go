// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: eventsProducts.sql

package db

import (
	"context"
)

const createEventProduct = `-- name: CreateEventProduct :one
INSERT INTO events_products (events_id, name, tokens_amount_pricing)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, events_id, name, tokens_amount_pricing
`

type CreateEventProductParams struct {
	EventsID            int32  `json:"events_id"`
	Name                string `json:"name"`
	TokensAmountPricing int32  `json:"tokens_amount_pricing"`
}

func (q *Queries) CreateEventProduct(ctx context.Context, arg CreateEventProductParams) (EventsProduct, error) {
	row := q.db.QueryRow(ctx, createEventProduct, arg.EventsID, arg.Name, arg.TokensAmountPricing)
	var i EventsProduct
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventsID,
		&i.Name,
		&i.TokensAmountPricing,
	)
	return i, err
}

const createEventProductSeller = `-- name: CreateEventProductSeller :one
INSERT INTO events_products_sellers (sellers_id, events_products_id)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, sellers_id, events_products_id
`

type CreateEventProductSellerParams struct {
	SellersID        int32 `json:"sellers_id"`
	EventsProductsID int32 `json:"events_products_id"`
}

func (q *Queries) CreateEventProductSeller(ctx context.Context, arg CreateEventProductSellerParams) (EventsProductsSeller, error) {
	row := q.db.QueryRow(ctx, createEventProductSeller, arg.SellersID, arg.EventsProductsID)
	var i EventsProductsSeller
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SellersID,
		&i.EventsProductsID,
	)
	return i, err
}

const deleteEventProduct = `-- name: DeleteEventProduct :exec
DELETE FROM events_products
WHERE id = $1
`

func (q *Queries) DeleteEventProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEventProduct, id)
	return err
}

const deleteEventProductSeller = `-- name: DeleteEventProductSeller :exec
DELETE FROM events_products_sellers
WHERE id = $1
`

func (q *Queries) DeleteEventProductSeller(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEventProductSeller, id)
	return err
}
