// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: guestsGroups.sql

package db

import (
	"context"
	"database/sql"
)

const createGuestsGroup = `-- name: CreateGuestsGroup :one
INSERT INTO guests_groups (guests_id, guests_groups_types_id)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, guests_id, guests_groups_types_id
`

type CreateGuestsGroupParams struct {
	GuestsID            int32 `json:"guests_id"`
	GuestsGroupsTypesID int32 `json:"guests_groups_types_id"`
}

func (q *Queries) CreateGuestsGroup(ctx context.Context, arg CreateGuestsGroupParams) (GuestsGroup, error) {
	row := q.db.QueryRow(ctx, createGuestsGroup, arg.GuestsID, arg.GuestsGroupsTypesID)
	var i GuestsGroup
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuestsID,
		&i.GuestsGroupsTypesID,
	)
	return i, err
}

const createGuestsGroupType = `-- name: CreateGuestsGroupType :one
INSERT INTO guests_groups_types (
        creator_id,
        events_id,
        group_name,
        group_color
    )
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, creator_id, events_id, group_name, group_color
`

type CreateGuestsGroupTypeParams struct {
	CreatorID  int32          `json:"creator_id"`
	EventsID   int32          `json:"events_id"`
	GroupName  string         `json:"group_name"`
	GroupColor sql.NullString `json:"group_color"`
}

func (q *Queries) CreateGuestsGroupType(ctx context.Context, arg CreateGuestsGroupTypeParams) (GuestsGroupsType, error) {
	row := q.db.QueryRow(ctx, createGuestsGroupType,
		arg.CreatorID,
		arg.EventsID,
		arg.GroupName,
		arg.GroupColor,
	)
	var i GuestsGroupsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatorID,
		&i.EventsID,
		&i.GroupName,
		&i.GroupColor,
	)
	return i, err
}

const deleteGuestsGroup = `-- name: DeleteGuestsGroup :exec
DELETE FROM guests_groups g USING guests_groups_types t
WHERE g.id = $1
    AND g.guests_groups_types_id = t.id
    AND t.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteGuestsGroupParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteGuestsGroup(ctx context.Context, arg DeleteGuestsGroupParams) error {
	_, err := q.db.Exec(ctx, deleteGuestsGroup, arg.ID, arg.UsersID)
	return err
}

const deleteGuestsGroupType = `-- name: DeleteGuestsGroupType :exec
DELETE FROM guests_groups_types
WHERE guests_groups_types.id = $1
    AND guests_groups_types.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteGuestsGroupTypeParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteGuestsGroupType(ctx context.Context, arg DeleteGuestsGroupTypeParams) error {
	_, err := q.db.Exec(ctx, deleteGuestsGroupType, arg.ID, arg.UsersID)
	return err
}

const getGuestsGroup = `-- name: GetGuestsGroup :one
SELECT g.id, g.created_at, g.updated_at, guests_id, guests_groups_types_id, t.id, t.created_at, t.updated_at, creator_id, events_id, group_name, group_color
FROM guests_groups g
    LEFT JOIN guests_groups_types t ON t.id = g.guests_groups_types_id
WHERE g.id = $1
    AND t.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetGuestsGroupParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

type GetGuestsGroupRow struct {
	ID                  int32          `json:"id"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
	GuestsID            int32          `json:"guests_id"`
	GuestsGroupsTypesID int32          `json:"guests_groups_types_id"`
	ID_2                sql.NullInt32  `json:"id_2"`
	CreatedAt_2         sql.NullTime   `json:"created_at_2"`
	UpdatedAt_2         sql.NullTime   `json:"updated_at_2"`
	CreatorID           sql.NullInt32  `json:"creator_id"`
	EventsID            sql.NullInt32  `json:"events_id"`
	GroupName           sql.NullString `json:"group_name"`
	GroupColor          sql.NullString `json:"group_color"`
}

func (q *Queries) GetGuestsGroup(ctx context.Context, arg GetGuestsGroupParams) (GetGuestsGroupRow, error) {
	row := q.db.QueryRow(ctx, getGuestsGroup, arg.ID, arg.EventsID, arg.UsersID)
	var i GetGuestsGroupRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuestsID,
		&i.GuestsGroupsTypesID,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.CreatorID,
		&i.EventsID,
		&i.GroupName,
		&i.GroupColor,
	)
	return i, err
}

const getGuestsGroupType = `-- name: GetGuestsGroupType :one
SELECT id, created_at, updated_at, creator_id, events_id, group_name, group_color
FROM guests_groups_types
WHERE guests_groups_types.id = $1
    AND guests_groups_types.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetGuestsGroupTypeParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetGuestsGroupType(ctx context.Context, arg GetGuestsGroupTypeParams) (GuestsGroupsType, error) {
	row := q.db.QueryRow(ctx, getGuestsGroupType, arg.ID, arg.EventsID, arg.UsersID)
	var i GuestsGroupsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatorID,
		&i.EventsID,
		&i.GroupName,
		&i.GroupColor,
	)
	return i, err
}

const getGuestsGroupTypes = `-- name: GetGuestsGroupTypes :one
SELECT id, created_at, updated_at, creator_id, events_id, group_name, group_color
FROM guests_groups_types
WHERE guests_groups_types.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetGuestsGroupTypesParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetGuestsGroupTypes(ctx context.Context, arg GetGuestsGroupTypesParams) (GuestsGroupsType, error) {
	row := q.db.QueryRow(ctx, getGuestsGroupTypes, arg.EventsID, arg.UsersID)
	var i GuestsGroupsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatorID,
		&i.EventsID,
		&i.GroupName,
		&i.GroupColor,
	)
	return i, err
}

const getGuestsGroups = `-- name: GetGuestsGroups :one
SELECT g.id, g.created_at, g.updated_at, guests_id, guests_groups_types_id, t.id, t.created_at, t.updated_at, creator_id, events_id, group_name, group_color
FROM guests_groups g
    LEFT JOIN guests_groups_types t ON t.id = g.guests_groups_types_id
WHERE t.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetGuestsGroupsParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

type GetGuestsGroupsRow struct {
	ID                  int32          `json:"id"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
	GuestsID            int32          `json:"guests_id"`
	GuestsGroupsTypesID int32          `json:"guests_groups_types_id"`
	ID_2                sql.NullInt32  `json:"id_2"`
	CreatedAt_2         sql.NullTime   `json:"created_at_2"`
	UpdatedAt_2         sql.NullTime   `json:"updated_at_2"`
	CreatorID           sql.NullInt32  `json:"creator_id"`
	EventsID            sql.NullInt32  `json:"events_id"`
	GroupName           sql.NullString `json:"group_name"`
	GroupColor          sql.NullString `json:"group_color"`
}

func (q *Queries) GetGuestsGroups(ctx context.Context, arg GetGuestsGroupsParams) (GetGuestsGroupsRow, error) {
	row := q.db.QueryRow(ctx, getGuestsGroups, arg.EventsID, arg.UsersID)
	var i GetGuestsGroupsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuestsID,
		&i.GuestsGroupsTypesID,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.CreatorID,
		&i.EventsID,
		&i.GroupName,
		&i.GroupColor,
	)
	return i, err
}
