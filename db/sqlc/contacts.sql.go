// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: contacts.sql

package db

import (
	"context"
	"database/sql"
)

type CreateUserContactsParams struct {
	Email     string         `json:"email"`
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Phone     string         `json:"phone"`
	Lang      sql.NullString `json:"lang"`
	CreatorID int32          `json:"creator_id"`
}

const deleteUserContact = `-- name: DeleteUserContact :exec
DELETE FROM contacts
WHERE creator_id = $1
  AND id = $2
`

type DeleteUserContactParams struct {
	CreatorID int32 `json:"creator_id"`
	ID        int32 `json:"id"`
}

func (q *Queries) DeleteUserContact(ctx context.Context, arg DeleteUserContactParams) error {
	_, err := q.db.Exec(ctx, deleteUserContact, arg.CreatorID, arg.ID)
	return err
}

const getUserContact = `-- name: GetUserContact :many
SELECT id, created_at, updated_at, email, firstname, lastname, phone, creator_id, lang
FROM contacts
WHERE creator_id = $1
  AND id = $2
`

type GetUserContactParams struct {
	CreatorID int32 `json:"creator_id"`
	ID        int32 `json:"id"`
}

func (q *Queries) GetUserContact(ctx context.Context, arg GetUserContactParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, getUserContact, arg.CreatorID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.CreatorID,
			&i.Lang,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserContacts = `-- name: GetUserContacts :many
SELECT id, created_at, updated_at, email, firstname, lastname, phone, creator_id, lang
FROM contacts
WHERE creator_id = $1
`

func (q *Queries) GetUserContacts(ctx context.Context, creatorID int32) ([]Contact, error) {
	rows, err := q.db.Query(ctx, getUserContacts, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.CreatorID,
			&i.Lang,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
