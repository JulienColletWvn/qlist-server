// Code generated by sqlc. DO NOT EDIT.
// source: contacts.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    email,
    firstname,
    lastname,
    phone,
    lang,
    creator_id
  )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, email, firstname, lastname, phone, creator_id, lang
`

type CreateContactParams struct {
	Email     string         `json:"email"`
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Phone     string         `json:"phone"`
	Lang      sql.NullString `json:"lang"`
	CreatorID int32          `json:"creator_id"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.Lang,
		arg.CreatorID,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.CreatorID,
		&i.Lang,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE creator_id = $1
  AND id = $2
`

type DeleteContactParams struct {
	CreatorID int32 `json:"creator_id"`
	ID        int32 `json:"id"`
}

func (q *Queries) DeleteContact(ctx context.Context, arg DeleteContactParams) error {
	_, err := q.db.ExecContext(ctx, deleteContact, arg.CreatorID, arg.ID)
	return err
}

const getContact = `-- name: GetContact :many
SELECT id, created_at, updated_at, email, firstname, lastname, phone, creator_id, lang
FROM contacts
WHERE creator_id = $1
  AND id = $2
`

type GetContactParams struct {
	CreatorID int32 `json:"creator_id"`
	ID        int32 `json:"id"`
}

func (q *Queries) GetContact(ctx context.Context, arg GetContactParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContact, arg.CreatorID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.CreatorID,
			&i.Lang,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContacts = `-- name: GetContacts :one
SELECT id, created_at, updated_at, email, firstname, lastname, phone, creator_id, lang
FROM contacts
WHERE creator_id = $1
`

func (q *Queries) GetContacts(ctx context.Context, creatorID int32) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContacts, creatorID)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.CreatorID,
		&i.Lang,
	)
	return i, err
}
