// Code generated by sqlc. DO NOT EDIT.
// source: guests.sql

package db

import (
	"context"
	"database/sql"
)

const createGuest = `-- name: CreateGuest :one
INSERT INTO guests (
  creator_id, email, firstname, lastname, phone
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, creator_id, email, firstname, lastname, phone
`

type CreateGuestParams struct {
	CreatorID int32          `json:"creator_id"`
	Email     string         `json:"email"`
	Firstname sql.NullString `json:"firstname"`
	Lastname  sql.NullString `json:"lastname"`
	Phone     sql.NullString `json:"phone"`
}

func (q *Queries) CreateGuest(ctx context.Context, arg CreateGuestParams) (Guest, error) {
	row := q.db.QueryRowContext(ctx, createGuest,
		arg.CreatorID,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
	)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatorID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
	)
	return i, err
}

const createGuestGroup = `-- name: CreateGuestGroup :one
INSERT INTO guests_groups (
  guests_id, guests_groups_types_id
) VALUES (
  $1, $2
)
RETURNING id, created_at, updated_at, guests_id, guests_groups_types_id
`

type CreateGuestGroupParams struct {
	GuestsID            int32 `json:"guests_id"`
	GuestsGroupsTypesID int32 `json:"guests_groups_types_id"`
}

func (q *Queries) CreateGuestGroup(ctx context.Context, arg CreateGuestGroupParams) (GuestsGroup, error) {
	row := q.db.QueryRowContext(ctx, createGuestGroup, arg.GuestsID, arg.GuestsGroupsTypesID)
	var i GuestsGroup
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GuestsID,
		&i.GuestsGroupsTypesID,
	)
	return i, err
}

const createGuestGroupType = `-- name: CreateGuestGroupType :one
INSERT INTO guests_groups_types (
  creator_id, group_name, group_color
) VALUES (
  $1, $2, $3
)
RETURNING id, created_at, updated_at, creator_id, group_name, group_color
`

type CreateGuestGroupTypeParams struct {
	CreatorID  int32          `json:"creator_id"`
	GroupName  string         `json:"group_name"`
	GroupColor sql.NullString `json:"group_color"`
}

func (q *Queries) CreateGuestGroupType(ctx context.Context, arg CreateGuestGroupTypeParams) (GuestsGroupsType, error) {
	row := q.db.QueryRowContext(ctx, createGuestGroupType, arg.CreatorID, arg.GroupName, arg.GroupColor)
	var i GuestsGroupsType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatorID,
		&i.GroupName,
		&i.GroupColor,
	)
	return i, err
}

const deleteGuest = `-- name: DeleteGuest :exec
DELETE FROM guests
WHERE id = $1
`

func (q *Queries) DeleteGuest(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGuest, id)
	return err
}

const deleteGuestGroup = `-- name: DeleteGuestGroup :exec
DELETE FROM guests_groups
WHERE id = $1
`

func (q *Queries) DeleteGuestGroup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGuestGroup, id)
	return err
}

const deleteGuestGroupType = `-- name: DeleteGuestGroupType :exec
DELETE FROM guests_groups_types
WHERE id = $1
`

func (q *Queries) DeleteGuestGroupType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGuestGroupType, id)
	return err
}
