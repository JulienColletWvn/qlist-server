// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: guests.sql

package db

import (
	"context"
)

const createEventGuest = `-- name: CreateEventGuest :one
INSERT INTO guests (note, events_id, contacts_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, note, events_id, contacts_id
`

type CreateEventGuestParams struct {
	Note       string `json:"note"`
	EventsID   int32  `json:"events_id"`
	ContactsID int32  `json:"contacts_id"`
}

func (q *Queries) CreateEventGuest(ctx context.Context, arg CreateEventGuestParams) (Guest, error) {
	row := q.db.QueryRow(ctx, createEventGuest, arg.Note, arg.EventsID, arg.ContactsID)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.EventsID,
		&i.ContactsID,
	)
	return i, err
}

type CreateEventGuestsParams struct {
	Note       string `json:"note"`
	EventsID   int32  `json:"events_id"`
	ContactsID int32  `json:"contacts_id"`
}

const deleteUserEventGuest = `-- name: DeleteUserEventGuest :exec
DELETE FROM guests
WHERE guests.id = $1
    AND guests.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteUserEventGuestParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteUserEventGuest(ctx context.Context, arg DeleteUserEventGuestParams) error {
	_, err := q.db.Exec(ctx, deleteUserEventGuest, arg.ID, arg.UsersID)
	return err
}

const getUserEventGuest = `-- name: GetUserEventGuest :one
SELECT id, created_at, updated_at, note, events_id, contacts_id
FROM guests
WHERE guests.id = $1
    AND guests.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetUserEventGuestParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetUserEventGuest(ctx context.Context, arg GetUserEventGuestParams) (Guest, error) {
	row := q.db.QueryRow(ctx, getUserEventGuest, arg.ID, arg.EventsID, arg.UsersID)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.EventsID,
		&i.ContactsID,
	)
	return i, err
}

const getUserEventGuests = `-- name: GetUserEventGuests :one
SELECT id, created_at, updated_at, note, events_id, contacts_id
FROM guests
WHERE guests.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetUserEventGuestsParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetUserEventGuests(ctx context.Context, arg GetUserEventGuestsParams) (Guest, error) {
	row := q.db.QueryRow(ctx, getUserEventGuests, arg.EventsID, arg.UsersID)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.EventsID,
		&i.ContactsID,
	)
	return i, err
}
