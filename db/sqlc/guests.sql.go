// Code generated by sqlc. DO NOT EDIT.
// source: guests.sql

package db

import (
	"context"
)

const createGuest = `-- name: CreateGuest :one
INSERT INTO guests (note, events_id, contacts_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, note, events_id, contacts_id
`

type CreateGuestParams struct {
	Note       string `json:"note"`
	EventsID   int32  `json:"events_id"`
	ContactsID int32  `json:"contacts_id"`
}

func (q *Queries) CreateGuest(ctx context.Context, arg CreateGuestParams) (Guest, error) {
	row := q.db.QueryRowContext(ctx, createGuest, arg.Note, arg.EventsID, arg.ContactsID)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.EventsID,
		&i.ContactsID,
	)
	return i, err
}

const deleteGuest = `-- name: DeleteGuest :exec
DELETE FROM guests
WHERE guests.id = $1
    AND guests.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.users_id = $2
    )
`

type DeleteGuestParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteGuest(ctx context.Context, arg DeleteGuestParams) error {
	_, err := q.db.ExecContext(ctx, deleteGuest, arg.ID, arg.UsersID)
	return err
}

const getGuest = `-- name: GetGuest :one
SELECT id, created_at, updated_at, note, events_id, contacts_id
FROM guests
WHERE guests.id = $1
    AND guests.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $2
            AND events_administrators.users_id = $3
    )
`

type GetGuestParams struct {
	ID       int32 `json:"id"`
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetGuest(ctx context.Context, arg GetGuestParams) (Guest, error) {
	row := q.db.QueryRowContext(ctx, getGuest, arg.ID, arg.EventsID, arg.UsersID)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.EventsID,
		&i.ContactsID,
	)
	return i, err
}

const getGuests = `-- name: GetGuests :one
SELECT id, created_at, updated_at, note, events_id, contacts_id
FROM guests
WHERE guests.events_id IN (
        SELECT events_administrators.events.id
        FROM events_administrators
        WHERE events_administrators.events_id = $1
            AND events_administrators.users_id = $2
    )
`

type GetGuestsParams struct {
	EventsID int32 `json:"events_id"`
	UsersID  int32 `json:"users_id"`
}

func (q *Queries) GetGuests(ctx context.Context, arg GetGuestsParams) (Guest, error) {
	row := q.db.QueryRowContext(ctx, getGuests, arg.EventsID, arg.UsersID)
	var i Guest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
		&i.EventsID,
		&i.ContactsID,
	)
	return i, err
}
