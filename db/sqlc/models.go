// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type EventsContentType string

const (
	EventsContentTypeName        EventsContentType = "name"
	EventsContentTypeDescription EventsContentType = "description"
)

func (e *EventsContentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventsContentType(s)
	case string:
		*e = EventsContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventsContentType: %T", src)
	}
	return nil
}

type NullEventsContentType struct {
	EventsContentType EventsContentType
	Valid             bool // Valid is true if EventsContentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventsContentType) Scan(value interface{}) error {
	if value == nil {
		ns.EventsContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventsContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventsContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.EventsContentType, nil
}

type PricingSourceType string

const (
	PricingSourceTypeWeb    PricingSourceType = "web"
	PricingSourceTypeOnsite PricingSourceType = "onsite"
)

func (e *PricingSourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PricingSourceType(s)
	case string:
		*e = PricingSourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for PricingSourceType: %T", src)
	}
	return nil
}

type NullPricingSourceType struct {
	PricingSourceType PricingSourceType
	Valid             bool // Valid is true if PricingSourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPricingSourceType) Scan(value interface{}) error {
	if value == nil {
		ns.PricingSourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PricingSourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPricingSourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.PricingSourceType, nil
}

type TransactionStatus string

const (
	TransactionStatusPending   TransactionStatus = "pending"
	TransactionStatusValidated TransactionStatus = "validated"
	TransactionStatusCancelled TransactionStatus = "cancelled"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus
	Valid             bool // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TransactionStatus, nil
}

type Cashier struct {
	ID         int32        `json:"id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	ContactsID int32        `json:"contacts_id"`
	EventsID   int32        `json:"events_id"`
}

type Contact struct {
	ID        int32          `json:"id"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	Email     string         `json:"email"`
	Firstname string         `json:"firstname"`
	Lastname  string         `json:"lastname"`
	Phone     string         `json:"phone"`
	CreatorID int32          `json:"creator_id"`
	Lang      sql.NullString `json:"lang"`
}

type Event struct {
	ID            int32        `json:"id"`
	CreatedAt     sql.NullTime `json:"created_at"`
	UpdatedAt     sql.NullTime `json:"updated_at"`
	StartDate     time.Time    `json:"start_date"`
	EndDate       time.Time    `json:"end_date"`
	Location      string       `json:"location"`
	FreeWifi      bool         `json:"free_wifi"`
	Public        bool         `json:"public"`
	TicketsAmount int32        `json:"tickets_amount"`
	CreatorID     int32        `json:"creator_id"`
}

type EventsAdministrator struct {
	ID        int32        `json:"id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UsersID   int32        `json:"users_id"`
	EventsID  int32        `json:"events_id"`
}

type EventsContent struct {
	ID        int32                 `json:"id"`
	CreatedAt sql.NullTime          `json:"created_at"`
	UpdatedAt sql.NullTime          `json:"updated_at"`
	Type      NullEventsContentType `json:"type"`
	Content   string                `json:"content"`
	Lang      string                `json:"lang"`
	EventsID  int32                 `json:"events_id"`
}

type EventsPhoto struct {
	ID        int32        `json:"id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	EventsID  int32        `json:"events_id"`
	Url       string       `json:"url"`
}

type EventsProduct struct {
	ID                  int32        `json:"id"`
	CreatedAt           sql.NullTime `json:"created_at"`
	UpdatedAt           sql.NullTime `json:"updated_at"`
	EventsID            int32        `json:"events_id"`
	Name                string       `json:"name"`
	TokensAmountPricing int32        `json:"tokens_amount_pricing"`
}

type EventsProductsSeller struct {
	ID               int32        `json:"id"`
	CreatedAt        sql.NullTime `json:"created_at"`
	UpdatedAt        sql.NullTime `json:"updated_at"`
	SellersID        int32        `json:"sellers_id"`
	EventsProductsID int32        `json:"events_products_id"`
}

type Guest struct {
	ID         int32        `json:"id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	Note       string       `json:"note"`
	EventsID   int32        `json:"events_id"`
	ContactsID int32        `json:"contacts_id"`
}

type GuestsGroup struct {
	ID                  int32        `json:"id"`
	CreatedAt           sql.NullTime `json:"created_at"`
	UpdatedAt           sql.NullTime `json:"updated_at"`
	GuestsID            int32        `json:"guests_id"`
	GuestsGroupsTypesID int32        `json:"guests_groups_types_id"`
}

type GuestsGroupsType struct {
	ID         int32          `json:"id"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	CreatorID  int32          `json:"creator_id"`
	EventsID   int32          `json:"events_id"`
	GroupName  string         `json:"group_name"`
	GroupColor sql.NullString `json:"group_color"`
}

type Seller struct {
	ID         int32        `json:"id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	ContactsID int32        `json:"contacts_id"`
	EventsID   int32        `json:"events_id"`
}

type Steward struct {
	ID         int32        `json:"id"`
	CreatedAt  sql.NullTime `json:"created_at"`
	ContactsID int32        `json:"contacts_id"`
	EventsID   int32        `json:"events_id"`
}

type Ticket struct {
	ID            int32        `json:"id"`
	CreatedAt     sql.NullTime `json:"created_at"`
	TicketsTypeID int32        `json:"tickets_type_id"`
	GuestsID      int32        `json:"guests_id"`
}

type TicketsTransaction struct {
	ID         int32             `json:"id"`
	CreatedAt  sql.NullTime      `json:"created_at"`
	TicketsID  int32             `json:"tickets_id"`
	StewardsID int32             `json:"stewards_id"`
	Amount     int32             `json:"amount"`
	Status     TransactionStatus `json:"status"`
}

type TicketsType struct {
	ID                int32        `json:"id"`
	CreatedAt         sql.NullTime `json:"created_at"`
	UpdatedAt         sql.NullTime `json:"updated_at"`
	EventsID          int32        `json:"events_id"`
	Name              string       `json:"name"`
	StartValidityDate sql.NullTime `json:"start_validity_date"`
	EndValidityDate   sql.NullTime `json:"end_validity_date"`
	UsageLimitation   int32        `json:"usage_limitation"`
	UsageUnlimited    bool         `json:"usage_unlimited"`
}

type User struct {
	ID        int32        `json:"id"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	Firstname string       `json:"firstname"`
	Lastname  string       `json:"lastname"`
	Phone     string       `json:"phone"`
}

type Wallet struct {
	ID            int32         `json:"id"`
	CreatedAt     sql.NullTime  `json:"created_at"`
	GuestsID      int32         `json:"guests_id"`
	WalletsTypeID int32         `json:"wallets_type_id"`
	Token         string        `json:"token"`
	Balance       sql.NullInt32 `json:"balance"`
}

type WalletsPricing struct {
	ID            int32             `json:"id"`
	Type          PricingSourceType `json:"type"`
	Quantity      int32             `json:"quantity"`
	UnitPrice     int32             `json:"unit_price"`
	WalletsTypeID int32             `json:"wallets_type_id"`
}

type WalletsTransaction struct {
	ID               int32             `json:"id"`
	CreatedAt        sql.NullTime      `json:"created_at"`
	UpdatedAt        sql.NullTime      `json:"updated_at"`
	Amount           int32             `json:"amount"`
	OnlineSell       bool              `json:"online_sell"`
	CashiersID       sql.NullInt32     `json:"cashiers_id"`
	SellersID        sql.NullInt32     `json:"sellers_id"`
	EventsProductsID int32             `json:"events_products_id"`
	Status           TransactionStatus `json:"status"`
}

type WalletsType struct {
	ID                int32        `json:"id"`
	CreatedAt         sql.NullTime `json:"created_at"`
	UpdatedAt         sql.NullTime `json:"updated_at"`
	EventsID          int32        `json:"events_id"`
	Name              string       `json:"name"`
	StartValidityDate time.Time    `json:"start_validity_date"`
	EndValidityDate   time.Time    `json:"end_validity_date"`
	MaxAmount         int32        `json:"max_amount"`
	OnlineReload      bool         `json:"online_reload"`
}
