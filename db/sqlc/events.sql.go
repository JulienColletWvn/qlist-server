// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: events.sql

package db

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    start_date,
    end_date,
    location,
    free_wifi,
    public,
    tickets_amount,
    creator_id
  )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, start_date, end_date, location, free_wifi, public, tickets_amount, creator_id
`

type CreateEventParams struct {
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
	Location      string    `json:"location"`
	FreeWifi      bool      `json:"free_wifi"`
	Public        bool      `json:"public"`
	TicketsAmount int32     `json:"tickets_amount"`
	CreatorID     int32     `json:"creator_id"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.StartDate,
		arg.EndDate,
		arg.Location,
		arg.FreeWifi,
		arg.Public,
		arg.TicketsAmount,
		arg.CreatorID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.FreeWifi,
		&i.Public,
		&i.TicketsAmount,
		&i.CreatorID,
	)
	return i, err
}

const createEventAdministrator = `-- name: CreateEventAdministrator :one
INSERT INTO events_administrators (users_id, events_id)
VALUES ($1, $2)
RETURNING id, created_at, users_id, events_id
`

type CreateEventAdministratorParams struct {
	UsersID  int32 `json:"users_id"`
	EventsID int32 `json:"events_id"`
}

func (q *Queries) CreateEventAdministrator(ctx context.Context, arg CreateEventAdministratorParams) (EventsAdministrator, error) {
	row := q.db.QueryRow(ctx, createEventAdministrator, arg.UsersID, arg.EventsID)
	var i EventsAdministrator
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UsersID,
		&i.EventsID,
	)
	return i, err
}

const createEventContent = `-- name: CreateEventContent :one
INSERT INTO events_contents (type, content, lang, events_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, type, content, lang, events_id
`

type CreateEventContentParams struct {
	Type     NullEventsContentType `json:"type"`
	Content  string                `json:"content"`
	Lang     string                `json:"lang"`
	EventsID int32                 `json:"events_id"`
}

func (q *Queries) CreateEventContent(ctx context.Context, arg CreateEventContentParams) (EventsContent, error) {
	row := q.db.QueryRow(ctx, createEventContent,
		arg.Type,
		arg.Content,
		arg.Lang,
		arg.EventsID,
	)
	var i EventsContent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Content,
		&i.Lang,
		&i.EventsID,
	)
	return i, err
}

const createEventPhoto = `-- name: CreateEventPhoto :one
INSERT INTO events_photos (url, events_id)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, events_id, url
`

type CreateEventPhotoParams struct {
	Url      string `json:"url"`
	EventsID int32  `json:"events_id"`
}

func (q *Queries) CreateEventPhoto(ctx context.Context, arg CreateEventPhotoParams) (EventsPhoto, error) {
	row := q.db.QueryRow(ctx, createEventPhoto, arg.Url, arg.EventsID)
	var i EventsPhoto
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventsID,
		&i.Url,
	)
	return i, err
}

const deleteAdministratorEvent = `-- name: DeleteAdministratorEvent :exec
DELETE FROM events
WHERE events.id = $1
  AND events.creator_id IN (
    SELECT events_administrators.users_id
    FROM events_administrators
    WHERE events_administrators.events_id = $1
      AND events_administrators.users_id = $2
  )
`

type DeleteAdministratorEventParams struct {
	ID      int32 `json:"id"`
	UsersID int32 `json:"users_id"`
}

func (q *Queries) DeleteAdministratorEvent(ctx context.Context, arg DeleteAdministratorEventParams) error {
	_, err := q.db.Exec(ctx, deleteAdministratorEvent, arg.ID, arg.UsersID)
	return err
}

const getAdministratorEvent = `-- name: GetAdministratorEvent :one
SELECT id, created_at, updated_at, start_date, end_date, location, free_wifi, public, tickets_amount, creator_id
FROM events
WHERE $1::int IN (
    SELECT events_administrators.users_id
    FROM events_administrators
    WHERE events_administrators.events_id = $2
  )
`

type GetAdministratorEventParams struct {
	Column1  int32 `json:"column_1"`
	EventsID int32 `json:"events_id"`
}

func (q *Queries) GetAdministratorEvent(ctx context.Context, arg GetAdministratorEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, getAdministratorEvent, arg.Column1, arg.EventsID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.FreeWifi,
		&i.Public,
		&i.TicketsAmount,
		&i.CreatorID,
	)
	return i, err
}

const getAdministratorEvents = `-- name: GetAdministratorEvents :many
SELECT id, created_at, updated_at, start_date, end_date, location, free_wifi, public, tickets_amount, creator_id
FROM events
WHERE $1::int IN (
    SELECT users_id
    FROM events_administrators
  )
`

func (q *Queries) GetAdministratorEvents(ctx context.Context, dollar_1 int32) ([]Event, error) {
	rows, err := q.db.Query(ctx, getAdministratorEvents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.FreeWifi,
			&i.Public,
			&i.TicketsAmount,
			&i.CreatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventContents = `-- name: GetEventContents :many
SELECT id, created_at, updated_at, type, content, lang, events_id
FROM events_contents
WHERE events_id = $1
`

func (q *Queries) GetEventContents(ctx context.Context, eventsID int32) ([]EventsContent, error) {
	rows, err := q.db.Query(ctx, getEventContents, eventsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventsContent
	for rows.Next() {
		var i EventsContent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Content,
			&i.Lang,
			&i.EventsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicEvent = `-- name: GetPublicEvent :one
SELECT id, created_at, updated_at, start_date, end_date, location, free_wifi, public, tickets_amount, creator_id
FROM events
WHERE id = $1
  AND events.public = true
`

func (q *Queries) GetPublicEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRow(ctx, getPublicEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.FreeWifi,
		&i.Public,
		&i.TicketsAmount,
		&i.CreatorID,
	)
	return i, err
}

const getPublicEvents = `-- name: GetPublicEvents :many
SELECT id, created_at, updated_at, start_date, end_date, location, free_wifi, public, tickets_amount, creator_id
FROM events
WHERE events.public = true
`

func (q *Queries) GetPublicEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, getPublicEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.FreeWifi,
			&i.Public,
			&i.TicketsAmount,
			&i.CreatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
